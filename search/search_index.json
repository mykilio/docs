{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"Home"},{"location":"contributors/contributing.html","text":"Contributing \u00b6 This section describes how you can contribute to the different projects of the ecosystem. Documentation \u00b6 The documentation is located in the mykilio/docs repository. We use MkDocs with the Material for MkDocs theme to write and publish the documentation, which require Python3 to be installed. If you are using Ubuntu this can be done by following the steps below. # Install packages for Python3 development. sudo apt update sudo apt install -y make python3 python3-pip python3-venv You may now install the Python dependencies via pip and the Python Package Index . Afterwards, you can activate the virtual environment and either start the development server or build the documentation directly via the commands shown below. # Set up virtual environment and install dependencies via `pip`. make # Activate virtual environment. source venv/bin/activate # Run the local development server. mkdocs serve # Build the documentation for the deployment to a static file server. mkdocs build # Exit the virtual environment. deactivate Most of the documentation content is located in the docs . If you want to add items to the navigation, you may have to modify the mkdocs.yml file.","title":"Contributing"},{"location":"contributors/contributing.html#contributing","text":"This section describes how you can contribute to the different projects of the ecosystem.","title":"Contributing"},{"location":"contributors/contributing.html#documentation","text":"The documentation is located in the mykilio/docs repository. We use MkDocs with the Material for MkDocs theme to write and publish the documentation, which require Python3 to be installed. If you are using Ubuntu this can be done by following the steps below. # Install packages for Python3 development. sudo apt update sudo apt install -y make python3 python3-pip python3-venv You may now install the Python dependencies via pip and the Python Package Index . Afterwards, you can activate the virtual environment and either start the development server or build the documentation directly via the commands shown below. # Set up virtual environment and install dependencies via `pip`. make # Activate virtual environment. source venv/bin/activate # Run the local development server. mkdocs serve # Build the documentation for the deployment to a static file server. mkdocs build # Exit the virtual environment. deactivate Most of the documentation content is located in the docs . If you want to add items to the navigation, you may have to modify the mkdocs.yml file.","title":"Documentation"},{"location":"contributors/faq.html","text":"FAQ \u00b6 A collection of frequently asked questions regarding the project. Why are your README files so empty? \u00b6 We strive to create a single source of truth within the mykilio/docs repository. To achieve this we need to actively restrict the scattering of information and create a common point of reference for any information associated with this project. Cutting the README files short is a part of the strategy and we believe that this will help us to reduce the amout of outdated documentation. Why did you create yet another project? \u00b6 This is a fair question especially as there are a lot of similarities between our ecosystem and other frameworks that inspired us, such as Mainflux or Moleculer . We perceive Mainflux to focus on providing a general-purpose platform for IoT solutions. Mykilio instead tries to provide a general-purpose library for the development of cloud-native applications. Overall, we really admire the architecture, the journey and the technology stack of Mainflux . We will continue to follow their journey and draw inspiration from them. Moleculer in contrast is a library and on a high-level addresses a lot of the challenges that we also try to solve. However, it is written in NodeJS , which does not enforce static typing. We are aware that TypeScript could potentially solve this problem, but this is not our only objection. In our experience we also found applications and libraries using NPM as a package management system to be incredibly maintenance-intense and poor in terms of interface stability. For this exact reason, we chose to start the journey with an SDK written in Go .","title":"FAQ"},{"location":"contributors/faq.html#faq","text":"A collection of frequently asked questions regarding the project.","title":"FAQ"},{"location":"contributors/faq.html#why-are-your-readme-files-so-empty","text":"We strive to create a single source of truth within the mykilio/docs repository. To achieve this we need to actively restrict the scattering of information and create a common point of reference for any information associated with this project. Cutting the README files short is a part of the strategy and we believe that this will help us to reduce the amout of outdated documentation.","title":"Why are your README files so empty?"},{"location":"contributors/faq.html#why-did-you-create-yet-another-project","text":"This is a fair question especially as there are a lot of similarities between our ecosystem and other frameworks that inspired us, such as Mainflux or Moleculer . We perceive Mainflux to focus on providing a general-purpose platform for IoT solutions. Mykilio instead tries to provide a general-purpose library for the development of cloud-native applications. Overall, we really admire the architecture, the journey and the technology stack of Mainflux . We will continue to follow their journey and draw inspiration from them. Moleculer in contrast is a library and on a high-level addresses a lot of the challenges that we also try to solve. However, it is written in NodeJS , which does not enforce static typing. We are aware that TypeScript could potentially solve this problem, but this is not our only objection. In our experience we also found applications and libraries using NPM as a package management system to be incredibly maintenance-intense and poor in terms of interface stability. For this exact reason, we chose to start the journey with an SDK written in Go .","title":"Why did you create yet another project?"},{"location":"ecosystem/concepts.html","text":"Concepts \u00b6 This document explains the underlying concepts and ideas of this library. TODO: Insert diagram that illustrates the correlation between Channels , Gateways , Brokers and Services . Channels \u00b6 A key concept of the architecture is the concept of channels. Channels are a canonical representation of a hierarchical structure. Channels are identified by one or more lowercase, hyphen-delimited, plural nouns ( /[a-z-]+/ ). A single dot ( . ) is used to define a new hierarchy level. The format is inspired by the type attribute of a CloudEvent . The table below illustrates the correlation between channels and other concepts of representing hierarchy levels in other protocols. Concept Resource action Wildcard resource Wildcard action Channel pets.create *.create pets.* HTTP endpoint POST /pets POST /* ALL /pets MQTT topic pets/create #/create pets/# Redis channel pets.create *.create pets.* NATS subject pets.create *.create pets.* Special channels \u00b6 TODO: Document the concept of persistent channels also referred to as queues . TODO: Document the concept of bi-directional point-to-point connections also referred to as streams . Gateways \u00b6 Gateways make it possible to translate from protocols and their representations of hierarchies to the canonical format of channels. Below you may find a list of currently supported gateways: HTTP gateway ( gateway-http ) A gateway that converts HTTP requests into resource actions based on the HTTP method and the request path. With this gateway it is possible to expose event-driven services as RESTful HTTP API by simply deploying this gateway service. TODO: Conceptualize and document how the Web gateway for exposes endpoints that allow connecting to channels via WebSockets .","title":"Concepts"},{"location":"ecosystem/concepts.html#concepts","text":"This document explains the underlying concepts and ideas of this library. TODO: Insert diagram that illustrates the correlation between Channels , Gateways , Brokers and Services .","title":"Concepts"},{"location":"ecosystem/concepts.html#channels","text":"A key concept of the architecture is the concept of channels. Channels are a canonical representation of a hierarchical structure. Channels are identified by one or more lowercase, hyphen-delimited, plural nouns ( /[a-z-]+/ ). A single dot ( . ) is used to define a new hierarchy level. The format is inspired by the type attribute of a CloudEvent . The table below illustrates the correlation between channels and other concepts of representing hierarchy levels in other protocols. Concept Resource action Wildcard resource Wildcard action Channel pets.create *.create pets.* HTTP endpoint POST /pets POST /* ALL /pets MQTT topic pets/create #/create pets/# Redis channel pets.create *.create pets.* NATS subject pets.create *.create pets.*","title":"Channels"},{"location":"ecosystem/concepts.html#special-channels","text":"TODO: Document the concept of persistent channels also referred to as queues . TODO: Document the concept of bi-directional point-to-point connections also referred to as streams .","title":"Special channels"},{"location":"ecosystem/concepts.html#gateways","text":"Gateways make it possible to translate from protocols and their representations of hierarchies to the canonical format of channels. Below you may find a list of currently supported gateways: HTTP gateway ( gateway-http ) A gateway that converts HTTP requests into resource actions based on the HTTP method and the request path. With this gateway it is possible to expose event-driven services as RESTful HTTP API by simply deploying this gateway service. TODO: Conceptualize and document how the Web gateway for exposes endpoints that allow connecting to channels via WebSockets .","title":"Gateways"},{"location":"ecosystem/overview.html","text":"Overview \u00b6 I believe that mycelium is the neurological network of nature. Interlacing mosaics of mycelium infuse habitats with information-sharing membranes. These membranes are aware, react to change, and collectively have the long-term health of the host environment in mind. The mycelium stays in constant molecular communication with its environment, devising diverse enzymatic and chemical responses to complex challenges. \u2015 Paul Stamets, Mycelium Running: How Mushrooms Can Help Save the World Adopting, architecting and building microservices can be complex and complicated. Mykilio aims to tackle this complexity by providing an open ecosystem that allows developers to build applications quickly, supporting greenfield projects and gradual adoption of microservices alike. On a high level Mykilio tackles these challenges by drawing inspiration from other microservice frameworks, such as Mainflux and Moleculer while also using well-defined specifications such as CloudEvents . The long-term vision is to create an ecosystem of SDKs and services that allow developers to quickly build and deploy sharable services and deliver value to the customer. Currently, the key focus is on developing a stable SDK API that allows testing and adopting the ecosystem. API stability \u00b6 API stability Description \u2714\ufe0f stable The API is stable and maintained. There are no major breaking changes. The SDK has been tested, used in production and found to be reliable. \u26a0\ufe0f beta The API is being finalized. Major breaking changes are not expected, but may happen for internal APIs . Usage in production should be considered with care. \ud83d\udea8 alpha The API is under heavy development and subject to major breaking changes. Usage in production is strongly discouraged. Language support \u00b6 Below you may find a list of the languages that are currently supported via SDKs. \ud83d\udea8 Go : go get github.com/mykilio/mykilio.go","title":"Overview"},{"location":"ecosystem/overview.html#overview","text":"I believe that mycelium is the neurological network of nature. Interlacing mosaics of mycelium infuse habitats with information-sharing membranes. These membranes are aware, react to change, and collectively have the long-term health of the host environment in mind. The mycelium stays in constant molecular communication with its environment, devising diverse enzymatic and chemical responses to complex challenges. \u2015 Paul Stamets, Mycelium Running: How Mushrooms Can Help Save the World Adopting, architecting and building microservices can be complex and complicated. Mykilio aims to tackle this complexity by providing an open ecosystem that allows developers to build applications quickly, supporting greenfield projects and gradual adoption of microservices alike. On a high level Mykilio tackles these challenges by drawing inspiration from other microservice frameworks, such as Mainflux and Moleculer while also using well-defined specifications such as CloudEvents . The long-term vision is to create an ecosystem of SDKs and services that allow developers to quickly build and deploy sharable services and deliver value to the customer. Currently, the key focus is on developing a stable SDK API that allows testing and adopting the ecosystem.","title":"Overview"},{"location":"ecosystem/overview.html#api-stability","text":"API stability Description \u2714\ufe0f stable The API is stable and maintained. There are no major breaking changes. The SDK has been tested, used in production and found to be reliable. \u26a0\ufe0f beta The API is being finalized. Major breaking changes are not expected, but may happen for internal APIs . Usage in production should be considered with care. \ud83d\udea8 alpha The API is under heavy development and subject to major breaking changes. Usage in production is strongly discouraged.","title":"API stability"},{"location":"ecosystem/overview.html#language-support","text":"Below you may find a list of the languages that are currently supported via SDKs. \ud83d\udea8 Go : go get github.com/mykilio/mykilio.go","title":"Language support"}]}